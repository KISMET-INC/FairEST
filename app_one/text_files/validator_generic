

#=============================================##
# BLANK_validator SPECIFIC
# validates the data for user registration
#=============================================##
def BLANK_validator(self, postData):
    print(postData)
    #easy use variable
    post = postData
    # empty error dictionary
    errors = {}
    ## VALIDATOR LOGIC HERE ##
    return errors



    
    #=============================================##
    # basic_validator (GENERIC)
    # validates the data for user registration
    #=============================================##
    def basic_validator_generic(self, postData):
        # easy use variable
        post = postData
        # empty error dictionary
        errors = {}

        # check password and confirm password match
        if post['pass'] != post['confirm']:
            errors['passmatch'] = 'Passwords do no match'
        # check password length
        if len(post['pass']) < 2:
            errors['passlen'] = 'Password must be at least 8 characters'
        # check first name length
        if len(post['first']) < 2:
            errors['first'] = 'First Name bust be at least 2 characters'
        # check last name length
        if len(post['last']) < 2:
            errors['last'] = 'Last Name bust be at least 2 characters'

        # check unique email address
        user_email_query = User.objects.filter(email = post['email'])
        if len(users) > 0:
            errors['email'] = 'Email already in use'

        # check appropriate age
        today = date.today()
            #date to year - cast as int
        this_year = int(today.strftime('%Y'))
        birth_year_str = post['bday']
            # slice out year - cast to int
        birth_year = int(birth_year_str[0:4])

        if this_year - 13 < birth_year:
            errors['age'] = 'You must be at least 13 years old'

        return errors
